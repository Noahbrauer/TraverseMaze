**You can run this code with your method of choice. If running in shell you need to use consult('Program4.pl') inside the swipl shell and then test with one of the test cases. My program runs in every case except for hitting a loop. I tried to use a dynamic predicate to fix my path but it tends to end up in the same place of the loop. I ran out of time, but I believe I could have used a new set of predicates to back track and take the other direction of the fork.
With that being said...


I Approached my program by creating 5 seperate predicates. Some of those predicates have multiple cases for variations of input terms. These predicates are listed below with their description.

*mazepath*
This is my initializing predicate that takes the terms and does a few things and then calls the next. After that call returns it produces a path from a dynamic predicate. 

*traverseMaze*
Traverse maze is used to check for completion and call my next move predicate.

*nextmove*
When this predicate is called I branch to my different path cases for tha maze. I also use a input of random int 0-4. This is used to secure a random branch from my current path by initializing a variable to my random int +(1-3) and mod 4. This creates a slightly more random path choice and helps to not backtrack. It also calls moves.

*next*
In this predicate definition I increments the X and test for hitting a wall. If so it fails and returns. If not it continues to check if the next position is in the path, if it is it fails. If its not it adds it to the dynamic predicate. I also have versions of this predicate called nextpass that is only called when all of the movements are in the path. For that case it tests nextmoves again but using the nextpass predicate. In the predicate I do the same first steps as the first but I then test which backwards path to take, because there are no new paths to take. 

*find*
This finds the value located at the x,y given.

*checkhead*
This checks if the head is the same as the new head, is so it sets the predicate to the tail.

